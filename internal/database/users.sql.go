// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getAllYaps = `-- name: GetAllYaps :many
SELECT id, created_at, updated_at, body, user_id FROM yaps ORDER BY created_at ASC
`

func (q *Queries) GetAllYaps(ctx context.Context) ([]Yap, error) {
	rows, err := q.db.QueryContext(ctx, getAllYaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Yap
	for rows.Next() {
		var i Yap
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getYapByID = `-- name: GetYapByID :one
SELECT id, created_at, updated_at, body, user_id FROM yaps WHERE id = $1
`

func (q *Queries) GetYapByID(ctx context.Context, id uuid.UUID) (Yap, error) {
	row := q.db.QueryRowContext(ctx, getYapByID, id)
	var i Yap
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const newYap = `-- name: NewYap :one
INSERT INTO yaps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2 
)
RETURNING id, created_at, updated_at, body, user_id
`

type NewYapParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) NewYap(ctx context.Context, arg NewYapParams) (Yap, error) {
	row := q.db.QueryRowContext(ctx, newYap, arg.Body, arg.UserID)
	var i Yap
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
